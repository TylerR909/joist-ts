"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[611],{5318:(t,e,n)=>{n.d(e,{Zo:()=>c,kt:()=>h});var a=n(7378);function i(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function o(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function r(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?o(Object(n),!0).forEach((function(e){i(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function s(t,e){if(null==t)return{};var n,a,i=function(t,e){if(null==t)return{};var n,a,i={},o=Object.keys(t);for(a=0;a<o.length;a++)n=o[a],e.indexOf(n)>=0||(i[n]=t[n]);return i}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(a=0;a<o.length;a++)n=o[a],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(i[n]=t[n])}return i}var l=a.createContext({}),p=function(t){var e=a.useContext(l),n=e;return t&&(n="function"==typeof t?t(e):r(r({},e),t)),n},c=function(t){var e=p(t.components);return a.createElement(l.Provider,{value:e},t.children)},d={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},u=a.forwardRef((function(t,e){var n=t.components,i=t.mdxType,o=t.originalType,l=t.parentName,c=s(t,["components","mdxType","originalType","parentName"]),u=p(n),h=i,m=u["".concat(l,".").concat(h)]||u[h]||d[h]||o;return n?a.createElement(m,r(r({ref:e},c),{},{components:n})):a.createElement(m,r({ref:e},c))}));function h(t,e){var n=arguments,i=e&&e.mdxType;if("string"==typeof t||i){var o=n.length,r=new Array(o);r[0]=u;var s={};for(var l in e)hasOwnProperty.call(e,l)&&(s[l]=e[l]);s.originalType=t,s.mdxType="string"==typeof t?t:i,r[1]=s;for(var p=2;p<o;p++)r[p]=n[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},8681:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>l,contentTitle:()=>r,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var a=n(5773),i=(n(7378),n(5318));const o={title:"Custom Jest Matcher",sidebar_position:4},r=void 0,s={unversionedId:"testing/entity-matcher",id:"testing/entity-matcher",title:"Custom Jest Matcher",description:"Joist provides a toMatchEntity matcher for more pleasant assertions in Jest.",source:"@site/docs/testing/entity-matcher.md",sourceDirName:"testing",slug:"/testing/entity-matcher",permalink:"/docs/testing/entity-matcher",draft:!1,editUrl:"https://github.com/stephen/joist-ts/edit/main/docs/docs/testing/entity-matcher.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{title:"Custom Jest Matcher",sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Fast Database Resets",permalink:"/docs/testing/fast-database-resets"},next:{title:"Test Utils",permalink:"/docs/testing/test-utils"}},l={},p=[{value:"Automatic Loading of Relations",id:"automatic-loading-of-relations",level:3},{value:"Prettier Output",id:"prettier-output",level:3},{value:"Installation",id:"installation",level:3}],c={toc:p};function d(t){let{components:e,...n}=t;return(0,i.kt)("wrapper",(0,a.Z)({},c,n,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Joist provides a ",(0,i.kt)("inlineCode",{parentName:"p"},"toMatchEntity")," matcher for more pleasant assertions in Jest."),(0,i.kt)("p",null,"There are two main benefits:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Automatic loading of relations"),(0,i.kt)("li",{parentName:"ul"},"Prettier actual vs. expected output")),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"To use ",(0,i.kt)("inlineCode",{parentName:"p"},"toMatchEntity"),", you must have ",(0,i.kt)("inlineCode",{parentName:"p"},"joist-test-utils")," installed, which is not installed by default with Joist.")),(0,i.kt)("h3",{id:"automatic-loading-of-relations"},"Automatic Loading of Relations"),(0,i.kt)("p",null,'A potentially unwieldy pattern in tests is asserting against a "subtree" of data that was not initially loaded, i.e.:'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"const a1 = newAuthor(em);\n// Invoke something that adds books with reviews\nawait addBooksAndReviews(a1);\n// Because a1 is New we can access `books.get`, so this is easy...\nexpect(a1.books.get.length).toEqual(2);\n// But beyond that, we can't drill into each book's reviews\n// Compile error\nexpect(a1.books.get[0].reviews.get[0].title).toEqual(\"title\");\n")),(0,i.kt)("p",null,"And so test code would have to explicitly load what it wants to assert against, either with a separate ",(0,i.kt)("inlineCode",{parentName:"p"},"await b1.reviews.load()"),' for each individual relation (which can be tedious), or by declaring a "2nd version" of the entity with a ',(0,i.kt)("inlineCode",{parentName:"p"},"populate")," load hint (which is better but also awkward):"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},'const a1 = newAuthor(em);\n// Invoke something that adds books with reviews\nawait addBooksAndReviews(a1);\n// Preload the subtree of data we want to assert against\nconst a1_2 = await a1.populate({ books: "reviews" });\n// Now we can use get\nexpect(a1_2.books.get.length).toEqual(2);\nexpect(a1_2.books.get[0].reviews.get[0].title).toEqual("title");\n')),(0,i.kt)("p",null,"As a third option, ",(0,i.kt)("inlineCode",{parentName:"p"},"toMatchEntity")," provides a ",(0,i.kt)("inlineCode",{parentName:"p"},"toMatchObject"),"-style API so that a test can idiomatically declare what the subtree of data should be:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},'const a1 = newAuthor(em);\n// Invoke something that adds books with reviews\nawait addBooksAndReviews(a1);\nexpect(a1).toMatchEntity({\n  books: [\n    {\n      title: "b1",\n      reviews: [{ rating: 5 }],\n    },\n    {\n      title: "b2",\n      reviews: [{ rating: 4 }, { rating: -2 }],\n    },\n  ],\n});\n')),(0,i.kt)("p",null,'The upshot is that we get to assert against the entity "as if it\'s JSON" or "just data", and then ',(0,i.kt)("inlineCode",{parentName:"p"},"toMatchEntity")," takes care of loading the various references and collections."),(0,i.kt)("h3",{id:"prettier-output"},"Prettier Output"),(0,i.kt)("p",null,"Sometimes when entities are included in Jest failures, i.e. by Jest's native ",(0,i.kt)("inlineCode",{parentName:"p"},"toMatchObject"),', the Jest console output is ugly b/c Jest prints the internal implementation of the entity object (i.e. a failure for "expected ',(0,i.kt)("inlineCode",{parentName:"p"},"a1"),'" ends up printing the ',(0,i.kt)("inlineCode",{parentName:"p"},"a1.books")," field, which is actually a ",(0,i.kt)("inlineCode",{parentName:"p"},"OneToManyCollection")," with various internal flags/state, all of which are included in the output)."),(0,i.kt)("p",null,"Even with ~3-4 entities in a native ",(0,i.kt)("inlineCode",{parentName:"p"},"toMatchObject")," assertion, the output can get long and hard to visually parse."),(0,i.kt)("p",null,"Instead, ",(0,i.kt)("inlineCode",{parentName:"p"},"toMatchEntity"),' abbreviates each entity as simply its tagged id, so output for an assertion failure of "the collection expected two books of ',(0,i.kt)("inlineCode",{parentName:"p"},"b:1")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"b:2")," but only had one ",(0,i.kt)("inlineCode",{parentName:"p"},"b:2"),'" will look like:'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},'- Expected  - 0\n+ Received  + 1\n\n  Object {</>\n    "books": Array [\n+     "b:1",\n      "b:2",\n    ],\n  }\n`);\n')),(0,i.kt)("p",null,"Note that if an entity is new, i.e. the test has not done ",(0,i.kt)("inlineCode",{parentName:"p"},"em.flush")," (which is fine, tests should only ",(0,i.kt)("inlineCode",{parentName:"p"},"em.flush")," if really necessary, to be as fast & lightweight as possible), the abbreviation for an unsaved ",(0,i.kt)("inlineCode",{parentName:"p"},"Book"),' will be a "test id" of ',(0,i.kt)("inlineCode",{parentName:"p"},"b#1")," where ",(0,i.kt)("inlineCode",{parentName:"p"},"b")," is the entity's tag, and the ",(0,i.kt)("inlineCode",{parentName:"p"},"#1")," is the index of that particular entity within the ",(0,i.kt)("inlineCode",{parentName:"p"},"EntityManager"),"'s entities of that type."),(0,i.kt)("h3",{id:"installation"},"Installation"),(0,i.kt)("p",null,"In your ",(0,i.kt)("inlineCode",{parentName:"p"},"setupTests.ts"),", add:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},'import { toMatchEntity } from "joist-test-utils";\n\nexpect.extend({ toMatchEntity });\n')))}d.isMDXComponent=!0}}]);