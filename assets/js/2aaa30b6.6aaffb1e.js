"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[623],{5318:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var o=n(7378);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=o.createContext({}),s=function(e){var t=o.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},d=function(e){var t=s(e.components);return o.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},u=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,c=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),u=s(n),m=a,k=u["".concat(c,".").concat(m)]||u[m]||p[m]||r;return n?o.createElement(k,l(l({ref:t},d),{},{components:n})):o.createElement(k,l({ref:t},d))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,l=new Array(r);l[0]=u;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:a,l[1]=i;for(var s=2;s<r;s++)l[s]=n[s];return o.createElement.apply(null,l)}return o.createElement.apply(null,n)}u.displayName="MDXCreateElement"},5488:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>p,frontMatter:()=>r,metadata:()=>i,toc:()=>s});var o=n(5773),a=(n(7378),n(5318));const r={title:"Large Collections",sidebar_position:4},l=void 0,i={unversionedId:"advanced/large-collections",id:"advanced/large-collections",title:"Large Collections",description:"In Joist, large collections are one-to-many collections (like author.books) that would fundamentally load too much data (like a single author having 100k books), such that we want to prevent code from accidentally loading the collection by mistake.",source:"@site/docs/advanced/large-collections.md",sourceDirName:"advanced",slug:"/advanced/large-collections",permalink:"/docs/advanced/large-collections",draft:!1,editUrl:"https://github.com/stephen/joist-ts/edit/main/docs/docs/advanced/large-collections.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{title:"Large Collections",sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Entity Cloning",permalink:"/docs/advanced/cloning"},next:{title:"Optimistic Locking",permalink:"/docs/advanced/optimistic-locking"}},c={},s=[],d={toc:s};function p(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,o.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"In Joist, large collections are one-to-many collections (like ",(0,a.kt)("inlineCode",{parentName:"p"},"author.books"),") that would fundamentally load too much data (like a single author having 100k books), such that we want to prevent code from accidentally loading the collection by mistake."),(0,a.kt)("p",null,"Normally, ",(0,a.kt)("inlineCode",{parentName:"p"},"joist-codegen")," automatically generates loadable one-to-many collections in your domain modal. For example, given a ",(0,a.kt)("inlineCode",{parentName:"p"},"books.author_id")," foreign key, your code can immediately do:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'const author = await em.load(Author, "a:1");\nconst books = await author.books.load();\n')),(0,a.kt)("p",null,"Or use ",(0,a.kt)("inlineCode",{parentName:"p"},"books")," in a load hint:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'const author = await em.load(Author, "a:1", "books");\nconsole.log(author.books.get);\n')),(0,a.kt)("p",null,"Both of which will load/preload the full ",(0,a.kt)("inlineCode",{parentName:"p"},"author.books")," collection into memory for easy access."),(0,a.kt)("p",null,"Usually this is great, ",(0,a.kt)("em",{parentName:"p"},"unless")," we know when designing the schema that ",(0,a.kt)("inlineCode",{parentName:"p"},"author.books.load()")," is fundamentally likely to pull in too much data and blow our up ",(0,a.kt)("inlineCode",{parentName:"p"},"EntityManager"),"'s entity limit (which is 10,000 entities by default)."),(0,a.kt)("p",null,"In this scenario, we can tell Joist to treat ",(0,a.kt)("inlineCode",{parentName:"p"},"books")," as a large collection, by setting ",(0,a.kt)("inlineCode",{parentName:"p"},"large: true")," in the ",(0,a.kt)("inlineCode",{parentName:"p"},"joist-config.json"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "entities": {\n    "Author": {\n      "relations": {\n        "books": { "large": true }\n      }\n    }\n  }\n}\n')),(0,a.kt)("p",null,"Now, ",(0,a.kt)("inlineCode",{parentName:"p"},"joist-codegen")," still generates an ",(0,a.kt)("inlineCode",{parentName:"p"},"Author.books")," property, however it will be typed as a ",(0,a.kt)("inlineCode",{parentName:"p"},"LargeCollection")," which:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Does not have a ",(0,a.kt)("inlineCode",{parentName:"li"},".load()")," method, and"),(0,a.kt)("li",{parentName:"ul"},"Cannot be used in a load hint")),(0,a.kt)("p",null,'Both of which prevent the collection from accidentally being fully loaded into memory, and prevents developers from having to "just know" not to load ',(0,a.kt)("inlineCode",{parentName:"p"},"author.books")," while writing business logic."),(0,a.kt)("p",null,"Instead, the ",(0,a.kt)("inlineCode",{parentName:"p"},"LargeCollection")," relation only supports a few known-safe methods that work without fully loading it into memory:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'const author = await em.load(Author, "a:1");\nconst b1 = await em.load(Book, "b:1");\n\n// Adding/removing the book\nauthor.books.add(b1);\nauthor.books.remove(b1);\n\n// Probing if `b1` is in `author.books`\nawait author.books.includes(b1);\n\n// Probing if `bookId` is in `author.books`\nconst b2 = await author.books.find(bookId);\n')))}p.isMDXComponent=!0}}]);