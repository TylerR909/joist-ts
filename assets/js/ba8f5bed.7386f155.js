"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[179],{5318:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var o=n(7378);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=o.createContext({}),d=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=d(e.components);return o.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},c=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),c=d(n),m=a,f=c["".concat(s,".").concat(m)]||c[m]||u[m]||r;return n?o.createElement(f,l(l({ref:t},p),{},{components:n})):o.createElement(f,l({ref:t},p))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,l=new Array(r);l[0]=c;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:a,l[1]=i;for(var d=2;d<r;d++)l[d]=n[d];return o.createElement.apply(null,l)}return o.createElement.apply(null,n)}c.displayName="MDXCreateElement"},1534:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>r,metadata:()=>i,toc:()=>d});var o=n(5773),a=(n(7378),n(5318));const r={title:"Soft Deletes",sidebar_position:3},l=void 0,i={unversionedId:"advanced/soft-deletes",id:"advanced/soft-deletes",title:"Soft Deletes",description:'Joist has built-in support for the soft-delete pattern, of marking rows with a deleted_at column and then "mostly ignoring them" within the application.',source:"@site/docs/advanced/soft-deletes.md",sourceDirName:"advanced",slug:"/advanced/soft-deletes",permalink:"/docs/advanced/soft-deletes",draft:!1,editUrl:"https://github.com/stephen/joist-ts/edit/main/docs/docs/advanced/soft-deletes.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{title:"Soft Deletes",sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Tagged Ids",permalink:"/docs/advanced/tagged-ids"},next:{title:"Entity Cloning",permalink:"/docs/advanced/cloning"}},s={},d=[{value:"Setup",id:"setup",level:2},{value:"Load/Populate Behavior",id:"loadpopulate-behavior",level:2},{value:"Find Queries",id:"find-queries",level:2}],p={toc:d};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,o.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Joist has built-in support for the soft-delete pattern, of marking rows with a ",(0,a.kt)("inlineCode",{parentName:"p"},"deleted_at"),' column and then "mostly ignoring them" within the application.'),(0,a.kt)("p",null,'In our experience, it\'s common to have application bugs where business logic "forgets to ignore soft-deleted rows", so Joist flips the model to where soft-deleted rows are ',(0,a.kt)("em",{parentName:"p"},"ignored by default"),", and business logic needs to explicitly opt-in to seeing them."),(0,a.kt)("h2",{id:"setup"},"Setup"),(0,a.kt)("p",null,"To use Joist's soft-delete support, just add ",(0,a.kt)("inlineCode",{parentName:"p"},"deleted_at")," columns to any entity you want to soft-delete."),(0,a.kt)("p",null,"By default, Joist will pick up any column named ",(0,a.kt)("inlineCode",{parentName:"p"},"deleted_at")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"deletedAt")," as a soft-delete column, and use it for implicit filtering."),(0,a.kt)("p",null,"If you want to change the name of the ",(0,a.kt)("inlineCode",{parentName:"p"},"deleted_at")," column, you can configure that in ",(0,a.kt)("inlineCode",{parentName:"p"},"joist-config.json"),"'s ",(0,a.kt)("inlineCode",{parentName:"p"},"timestampFields")," key:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "timestampFields": {\n    "deletedAt": {\n      "names": ["deleted_at"]\n    }\n  }\n}\n')),(0,a.kt)("p",null,"Note that currently Joist assumes that ",(0,a.kt)("inlineCode",{parentName:"p"},"deleted_at")," columns are timestamps, but they should work as ",(0,a.kt)("inlineCode",{parentName:"p"},"boolean")," columns as well."),(0,a.kt)("h2",{id:"loadpopulate-behavior"},"Load/Populate Behavior"),(0,a.kt)("p",null,"When entities are soft-deleted, Joist's ",(0,a.kt)("inlineCode",{parentName:"p"},"populate")," methods will still fetch their rows from the database, but collection accessors (i.e. ",(0,a.kt)("inlineCode",{parentName:"p"},"o2m.get")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"m2m.get"),") will filter them out of the results."),(0,a.kt)("p",null,"For example, if an ",(0,a.kt)("inlineCode",{parentName:"p"},"Author")," has a soft-deleted ",(0,a.kt)("inlineCode",{parentName:"p"},"Book"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'// This loads all books for a:1 from the db\nconst a = await em.load(Author, "a:1", "books");\n// This list will not include any soft-deletes books\nconsole.log(a.books.get);\n')),(0,a.kt)("p",null,"If you do want to explicitly access soft-deleted rows, you can use the ",(0,a.kt)("inlineCode",{parentName:"p"},"getWithDeleted")," accessor:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"// This list will be everything\nconsole.log(a.books.getWithDeleted);\n")),(0,a.kt)("h2",{id:"find-queries"},"Find Queries"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"em.find")," queries also filter out soft-deleted rows by default but at the database level (by adding a ",(0,a.kt)("inlineCode",{parentName:"p"},"WHERE deleted_at IS NULL")," to the query)."),(0,a.kt)("p",null,"If you'd like to include soft-deleted rows in a ",(0,a.kt)("inlineCode",{parentName:"p"},"find")," query, you can use the ",(0,a.kt)("inlineCode",{parentName:"p"},"softDeletes")," option:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'const allBooks = await em.find(Book, {}, { softDeletes: "include" });\n')))}u.isMDXComponent=!0}}]);