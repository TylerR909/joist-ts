"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[702],{5318:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>h});var n=a(7378);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function r(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var s=n.createContext({}),p=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},d=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,l=e.originalType,s=e.parentName,d=r(e,["components","mdxType","originalType","parentName"]),m=p(a),h=i,u=m["".concat(s,".").concat(h)]||m[h]||c[h]||l;return a?n.createElement(u,o(o({ref:t},d),{},{components:a})):n.createElement(u,o({ref:t},d))}));function h(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var l=a.length,o=new Array(l);o[0]=m;var r={};for(var s in t)hasOwnProperty.call(t,s)&&(r[s]=t[s]);r.originalType=e,r.mdxType="string"==typeof e?e:i,o[1]=r;for(var p=2;p<l;p++)o[p]=a[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},4275:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>c,frontMatter:()=>l,metadata:()=>r,toc:()=>p});var n=a(5773),i=(a(7378),a(5318));const l={title:"Class Table Inheritance",sidebar_position:6},o=void 0,r={unversionedId:"advanced/class-table-inheritance",id:"advanced/class-table-inheritance",title:"Class Table Inheritance",description:"Joist supports Class Table Inheritance, which allows inheritance/subtyping of entities (like class Dog extends Animal), by automatically mapping single/logical polymorphic entities across separate per-subtype/physical SQL tables.",source:"@site/docs/advanced/class-table-inheritance.md",sourceDirName:"advanced",slug:"/advanced/class-table-inheritance",permalink:"/docs/advanced/class-table-inheritance",draft:!1,editUrl:"https://github.com/stephen/joist-ts/edit/main/docs/docs/advanced/class-table-inheritance.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{title:"Class Table Inheritance",sidebar_position:6},sidebar:"tutorialSidebar",previous:{title:"Lens Traversal",permalink:"/docs/advanced/lenses"},next:{title:"Full Text Search",permalink:"/docs/advanced/full-text-search"}},s={},p=[{value:"Database Representation",id:"database-representation",level:2},{value:"Entity Representation",id:"entity-representation",level:2},{value:"Tagged Ids",id:"tagged-ids",level:2},{value:"Abstract Base Types",id:"abstract-base-types",level:2},{value:"What about Single Table Inheritance?",id:"what-about-single-table-inheritance",level:2},{value:"But Isn&#39;t Inheritance Bad Design?",id:"but-isnt-inheritance-bad-design",level:2}],d={toc:p};function c(e){let{components:t,...a}=e;return(0,i.kt)("wrapper",(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Joist supports ",(0,i.kt)("a",{parentName:"p",href:"https://www.martinfowler.com/eaaCatalog/classTableInheritance.html"},"Class Table Inheritance"),", which allows inheritance/subtyping of entities (like ",(0,i.kt)("inlineCode",{parentName:"p"},"class Dog extends Animal"),"), by automatically mapping single/logical polymorphic entities across separate per-subtype/physical SQL tables."),(0,i.kt)("h2",{id:"database-representation"},"Database Representation"),(0,i.kt)("p",null,"For example, lets say we have a ",(0,i.kt)("inlineCode",{parentName:"p"},"Dog")," entity and a ",(0,i.kt)("inlineCode",{parentName:"p"},"Cat")," entity, and we want them to both extend the ",(0,i.kt)("inlineCode",{parentName:"p"},"Animal")," entity."),(0,i.kt)("p",null,"For class table inheritance, we represent this in Postgres by having three separate tables: ",(0,i.kt)("inlineCode",{parentName:"p"},"animals"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"dogs"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"cats"),"."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The ",(0,i.kt)("inlineCode",{parentName:"li"},"animals")," table has an ",(0,i.kt)("inlineCode",{parentName:"li"},"id")," primary key, with the usual auto increment behavior, and any fields that are common to all ",(0,i.kt)("inlineCode",{parentName:"li"},"Animal"),"s"),(0,i.kt)("li",{parentName:"ul"},"The ",(0,i.kt)("inlineCode",{parentName:"li"},"dogs")," table also has an ",(0,i.kt)("inlineCode",{parentName:"li"},"id")," primary key, but it does ",(0,i.kt)("em",{parentName:"li"},"not")," auto-increment, and is instead a foreign key to ",(0,i.kt)("inlineCode",{parentName:"li"},"animals.id"),", and has any fields that are unique to the ",(0,i.kt)("inlineCode",{parentName:"li"},"Dog")," entity"),(0,i.kt)("li",{parentName:"ul"},"The ",(0,i.kt)("inlineCode",{parentName:"li"},"cats")," table also has an ",(0,i.kt)("inlineCode",{parentName:"li"},"id")," primary key, again it does ",(0,i.kt)("em",{parentName:"li"},"not")," auto-increment, and is instead a foreign key to ",(0,i.kt)("inlineCode",{parentName:"li"},"animals.id"),", and has any fields that are unique to the ",(0,i.kt)("inlineCode",{parentName:"li"},"Cat")," entity")),(0,i.kt)("p",null,"If you're using Joist's ",(0,i.kt)("inlineCode",{parentName:"p"},"migration-utils"),", this might look like:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},'createEntityTable(b, "animals", {\n  name: "text",\n})\ncreateSubTable(b, "animals", "dogs", {\n  can_bark: "boolean",\n});\ncreateSubTable(b, "animals", "cats", {\n  can_meow: "boolean",\n});\n')),(0,i.kt)("h2",{id:"entity-representation"},"Entity Representation"),(0,i.kt)("p",null,"When ",(0,i.kt)("inlineCode",{parentName:"p"},"joist-codegen")," sees that ",(0,i.kt)("inlineCode",{parentName:"p"},"dogs.id")," is actually a foreign key to ",(0,i.kt)("inlineCode",{parentName:"p"},"animals.id"),", Joist will ensure that the ",(0,i.kt)("inlineCode",{parentName:"p"},"Dog")," model extends the ",(0,i.kt)("inlineCode",{parentName:"p"},"Animal")," model."),(0,i.kt)("p",null,"Note that because of the codegen entities, which contain the getter/setter boilerplate, it will actually end up looking like:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"// in AnimalCodegen.ts\nabstract class AnimalCodegen extends BaseEntity {\n  name: string;\n}\n\n// in Animal.ts\nclass Animal extends AnimalCodegen {\n  // any custom logic\n}\n\n// in DogCodegen.ts\nabstract class DogCodegen extends Animal {\n  can_bark: boolean;\n}\n\n// in Dog.ts\nclass Dog extends DogCodegen {\n  // any custom logic\n}\n")),(0,i.kt)("p",null,"And when you load several ",(0,i.kt)("inlineCode",{parentName:"p"},"Animal"),"s, Joist will automatically probe the ",(0,i.kt)("inlineCode",{parentName:"p"},"dogs")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"cats")," tables (by using a ",(0,i.kt)("inlineCode",{parentName:"p"},"LEFT OUTER JOIN")," to each subtype table) and create entities of the right type:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},'const [a1, a2] = await em.loadAll(Animal, ["a:1", "a:2"]);\n// If a1 was saved as a dog, it will be a Dog\nexpect(a1).toBeInstanceOf(Dog);\n// if a2 was saved as a cit, it will be a Cat\nexpect(a2).toBeInstanceOf(Cat);\n')),(0,i.kt)("p",null,"Similarly, if you save a ",(0,i.kt)("inlineCode",{parentName:"p"},"Dog")," entity, Joist will automatically split the entity's data across both tables, putting the ",(0,i.kt)("inlineCode",{parentName:"p"},"name")," into ",(0,i.kt)("inlineCode",{parentName:"p"},"animals")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"can_bark")," into ",(0,i.kt)("inlineCode",{parentName:"p"},"dogs"),", with the same ",(0,i.kt)("inlineCode",{parentName:"p"},"id")," value for both rows:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},'const dog = em.create(Dog, {\n  name: "doge",\n  can_bark: true,\n});\n// Generates both `INSERT INTO animals ...` and\n// `INSERT INTO dogs ...`.\nawait em.flush();\n')),(0,i.kt)("h2",{id:"tagged-ids"},"Tagged Ids"),(0,i.kt)("p",null,"Currently, subtypes share the same tagged id as the base type."),(0,i.kt)("p",null,"For example, ",(0,i.kt)("inlineCode",{parentName:"p"},"dog1.id")," returns ",(0,i.kt)("inlineCode",{parentName:"p"},"a:1")," because the ",(0,i.kt)("inlineCode",{parentName:"p"},"Dog"),"'s base type is ",(0,i.kt)("inlineCode",{parentName:"p"},"Animal"),", and all ",(0,i.kt)("inlineCode",{parentName:"p"},"Animal"),"s (regardless of whether they're ",(0,i.kt)("inlineCode",{parentName:"p"},"Dog"),"s or ",(0,i.kt)("inlineCode",{parentName:"p"},"Cat"),"s) use the ",(0,i.kt)("inlineCode",{parentName:"p"},"a")," tag."),(0,i.kt)("p",null,"Joist might someday support per-subtype tags, but it would be complicated b/c we don't always know the subtype of an id; e.g. if there is a ",(0,i.kt)("inlineCode",{parentName:"p"},"pet_owners.animal_id")," foreign key, and it points to either ",(0,i.kt)("inlineCode",{parentName:"p"},"Dog"),"s or ",(0,i.kt)("inlineCode",{parentName:"p"},"Cat"),"s, when loading the row ",(0,i.kt)("inlineCode",{parentName:"p"},"PetOwner:123")," it's impossible to know if the tagged id its ",(0,i.kt)("inlineCode",{parentName:"p"},"animal_id")," value should be ",(0,i.kt)("inlineCode",{parentName:"p"},"d:1")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"c:1")," without first probing the ",(0,i.kt)("inlineCode",{parentName:"p"},"dogs")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"cats")," tables, which takes extra SQL calls to do. So for now it's simplest/most straightforward to just share the same tag across the subtypes."),(0,i.kt)("h2",{id:"abstract-base-types"},"Abstract Base Types"),(0,i.kt)("p",null,"If you'd like to enforce that base type is abstract, i.e. that users cannot instantiate ",(0,i.kt)("inlineCode",{parentName:"p"},"Animal"),", they must instantiate either a ",(0,i.kt)("inlineCode",{parentName:"p"},"Dog")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"Cat"),", then you can mark ",(0,i.kt)("inlineCode",{parentName:"p"},"Animal")," as ",(0,i.kt)("inlineCode",{parentName:"p"},"abstract")," in the ",(0,i.kt)("inlineCode",{parentName:"p"},"joist-config.json")," file:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n "entities": {\n    "Animal": {\n       "tag": "a",\n       "abstract": true\n    }\n }\n}\n')),(0,i.kt)("p",null,"You also need to manually update the ",(0,i.kt)("inlineCode",{parentName:"p"},"Animal.ts")," file to make the class ",(0,i.kt)("inlineCode",{parentName:"p"},"abstract"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"export abstract class Animal extends AnimalCodegen {}\n")),(0,i.kt)("p",null,"After this, Joist will enforce that all ",(0,i.kt)("inlineCode",{parentName:"p"},"Animal"),"s must be either ",(0,i.kt)("inlineCode",{parentName:"p"},"Dog"),"s or ",(0,i.kt)("inlineCode",{parentName:"p"},"Cat"),"s."),(0,i.kt)("p",null,"For example, if an ",(0,i.kt)("inlineCode",{parentName:"p"},'em.load(Animal, "a:1")')," finds a row only in the ",(0,i.kt)("inlineCode",{parentName:"p"},"animals")," table, and no matching row in the ",(0,i.kt)("inlineCode",{parentName:"p"},"dogs")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"cats")," table, then the ",(0,i.kt)("inlineCode",{parentName:"p"},"em.load")," method will fail with an error message."),(0,i.kt)("h2",{id:"what-about-single-table-inheritance"},"What about Single Table Inheritance?"),(0,i.kt)("p",null,"An alternative to Class Table Inheritance (CTI) is ",(0,i.kt)("a",{parentName:"p",href:"https://www.martinfowler.com/eaaCatalog/singleTableInheritance.html"},"Single Table Inheritance")," (STI), where ",(0,i.kt)("inlineCode",{parentName:"p"},"Dog"),"s and ",(0,i.kt)("inlineCode",{parentName:"p"},"Cat"),"s don't have their own tables, but have their subtype-specific fields stored directly on the ",(0,i.kt)("inlineCode",{parentName:"p"},"animals")," table (e.g. both ",(0,i.kt)("inlineCode",{parentName:"p"},"animals.can_bark")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"animals.can_meow")," would be columns directly in the ",(0,i.kt)("inlineCode",{parentName:"p"},"animals")," table even though, for dogs, the ",(0,i.kt)("inlineCode",{parentName:"p"},"can_meow")," column is not applicable)."),(0,i.kt)("p",null,"Joist currently does not support STI, generally because CTI has several pros:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"With CTI, the database schema makes it obvious what the class hierarchy should be."),(0,i.kt)("p",{parentName:"li"},"Given how schema-driven Joist's ",(0,i.kt)("inlineCode",{parentName:"p"},"joist-codegen")," is, it's very convenient to have the per-type fields already split out (into separate tables) and then to use the ",(0,i.kt)("inlineCode",{parentName:"p"},"id")," foreign keys to discover the ",(0,i.kt)("inlineCode",{parentName:"p"},"extends")," relationships."),(0,i.kt)("p",{parentName:"li"},'With STI, this sort of "obvious" visibility does not exist, and we\'d have to encode the type hierarchy in ',(0,i.kt)("inlineCode",{parentName:"p"},"joist-config.json"),", i.e. some sort of mapping that says ",(0,i.kt)("inlineCode",{parentName:"p"},"animals.can_bark")," is only applicable for the ",(0,i.kt)("inlineCode",{parentName:"p"},"Dog")," subtype, and ",(0,i.kt)("inlineCode",{parentName:"p"},"animals.can_meow")," is only applicable for the ",(0,i.kt)("inlineCode",{parentName:"p"},"Cat")," subtype.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"With CTI, the schema is safer, because the subtype-only columns can have not-null constraints."),(0,i.kt)("p",{parentName:"li"},"With STI, even if ",(0,i.kt)("inlineCode",{parentName:"p"},"can_bark")," is required for all ",(0,i.kt)("inlineCode",{parentName:"p"},"Dog"),"s, because there will be ",(0,i.kt)("inlineCode",{parentName:"p"},"Cat")," rows in the ",(0,i.kt)("inlineCode",{parentName:"p"},"animals")," table that just fundamentally cannot have a ",(0,i.kt)("inlineCode",{parentName:"p"},"can_bark")," value, the column must be nullable."),(0,i.kt)("p",{parentName:"li"},"Which is fine if it's already nullable, but if you wanted it to be non-null, now we have to encode in ",(0,i.kt)("inlineCode",{parentName:"p"},"joist-config.json")," that it is ",(0,i.kt)("em",{parentName:"p"},"technically")," required, and rely on Joist's runtime code to enforce it.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"With CTI, we can have foreign keys directly to subtypes."),(0,i.kt)("p",{parentName:"li"},"For example, we could have a ",(0,i.kt)("inlineCode",{parentName:"p"},"DogCollar")," entity that had a ",(0,i.kt)("inlineCode",{parentName:"p"},"dog_collars.dog_id")," foreign key that points ",(0,i.kt)("em",{parentName:"p"},"only")," to ",(0,i.kt)("inlineCode",{parentName:"p"},"dogs"),", and is fundamentally unable to point to ",(0,i.kt)("inlineCode",{parentName:"p"},"Cat"),"s."),(0,i.kt)("p",{parentName:"li"},"With STI, it's not possible in the database to represent/enforce that FKs are only valid for a specific subtype."))),(0,i.kt)("p",null,"That said, the pro of STI is that you don't need ",(0,i.kt)("inlineCode",{parentName:"p"},"LEFT OUTER JOIN"),"s to load entities, b/c all data for all subtypes is a single table, so Joist could likely support STI someday, it just does not currently."),(0,i.kt)("h2",{id:"but-isnt-inheritance-bad-design"},"But Isn't Inheritance Bad Design?"),(0,i.kt)("p",null,'Yes, inheritance can be abused, particularly with deep inheritance hierarchies and/or just "bad design".'),(0,i.kt)("p",null,"But when you have a situation that fits it well, it can be an appropriate/valid way to design a schema, at your own choice/discretion."),(0,i.kt)("p",null,'If it helps, inheritance can also be thought of Abstract Data Types, which as a design pattern is generally considered a modern/"good" approach for accurately & type-safely modeling values that have different fields based on their current kind/type.'),(0,i.kt)("p",null,"ADTs also focus just on the per-kind/per-type data attributes, and less on the polymorphic behavior of methods encoded/implemented within the class hierarchy which was the focus of traditional OO-based inheritance."),(0,i.kt)("p",null,'When using inheritance with Joist entities, you can pick whichever approach you prefer: either more "just data" ADT-ish inheritance or "implementation-hiding methods" OO-ish inheritance.'))}c.isMDXComponent=!0}}]);