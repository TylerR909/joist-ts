"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[677],{5318:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>h});var a=n(7378);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=p(n),h=o,m=u["".concat(l,".").concat(h)]||u[h]||c[h]||r;return n?a.createElement(m,i(i({ref:t},d),{},{components:n})):a.createElement(m,i({ref:t},d))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var p=2;p<r;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},8128:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>c,frontMatter:()=>r,metadata:()=>s,toc:()=>p});var a=n(5773),o=(n(7378),n(5318));const r={title:"Lens Traversal",sidebar_position:5},i=void 0,s={unversionedId:"advanced/lenses",id:"advanced/lenses",title:"Lens Traversal",description:"Lenses provide quick navigation the object graph, for example to navigate from an Author a",source:"@site/docs/advanced/lenses.md",sourceDirName:"advanced",slug:"/advanced/lenses",permalink:"/docs/advanced/lenses",draft:!1,editUrl:"https://github.com/stephen/joist-ts/edit/main/docs/docs/advanced/lenses.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{title:"Lens Traversal",sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Optimistic Locking",permalink:"/docs/advanced/optimistic-locking"},next:{title:"Class Table Inheritance",permalink:"/docs/advanced/class-table-inheritance"}},l={},p=[{value:"Explanation",id:"explanation",level:2},{value:"Typing",id:"typing",level:2}],d={toc:p};function c(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Lenses provide quick navigation the object graph, for example to navigate from an ",(0,o.kt)("inlineCode",{parentName:"p"},"Author")," ",(0,o.kt)("inlineCode",{parentName:"p"},"a:1")," to all of its books, and all of its book's reviews, you can write:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},'// Load an author as usual\nconst author = await em.load(Author, "a:1");\n// The `a.books.reviews` creates a lens/path to navigate\nconst reviews = await author.load(a => a.books.reviews);\nconsole.log(`Found ${reviews.length} reviews`);\n')),(0,o.kt)("p",null,"Behind the scenes, the above code executes exactly the same as using Joist's populate hints to preload and then ",(0,o.kt)("inlineCode",{parentName:"p"},".get")," + ",(0,o.kt)("inlineCode",{parentName:"p"},".flatMap")," across preloaded relations:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},'// Load an author but with a populate hint\nconst author = await em.load(\n  Author,\n  "a:1",\n  { books: "reviews" }\n);\n// Now flatMap book reviews w/o any awaits\nconst reviews = author.books.get.flatMap((book) => {\n  return book.reviews.get;\n})\nconsole.log(`Found ${reviews.length} reviews`);\n')),(0,o.kt)("p",null,"Both of these features prevent ",(0,o.kt)("inlineCode",{parentName:"p"},"await")," hell (by having only a single ",(0,o.kt)("inlineCode",{parentName:"p"},"await")," and then otherwise synchronous code), and which one is better depends on your need:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"If you need to apply filters and transformation logic, the populate hint with explicit ",(0,o.kt)("inlineCode",{parentName:"li"},".get"),"s",(0,o.kt)("inlineCode",{parentName:"li"},"and"),".flatMap`s is better b/c you can intersperse your custom logic as needed."),(0,o.kt)("li",{parentName:"ul"},"If you just need to do a simple/no filtering/no transformation navigation of the object graph, then the lens ",(0,o.kt)("inlineCode",{parentName:"li"},".load")," approach is more succint.")),(0,o.kt)("h2",{id:"explanation"},"Explanation"),(0,o.kt)("p",null,"In the above example, the ",(0,o.kt)("inlineCode",{parentName:"p"},"author.load")," method passes its lambda the parameter ",(0,o.kt)("inlineCode",{parentName:"p"},"a"),"; this parameter is just a proxy/",(0,o.kt)("a",{parentName:"p",href:"https://medium.com/@dtipson/functional-lenses-d1aba9e52254"},"lens"),' records/"marks" what path to take through the object graph.'),(0,o.kt)("p",null,"Once the lambda returns that path (i.e. ",(0,o.kt)("inlineCode",{parentName:"p"},"a.books.reviews")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"author -> books -> reviews"),"), then the ",(0,o.kt)("inlineCode",{parentName:"p"},"load"),' method internally loads/follows those paths, and returns the collection of entities that was at the "end" of the path.'),(0,o.kt)("h2",{id:"typing"},"Typing"),(0,o.kt)("p",null,"In the above example, the ",(0,o.kt)("inlineCode",{parentName:"p"},"a")," parameter is a ",(0,o.kt)("inlineCode",{parentName:"p"},"Lens<Author>"),", where ",(0,o.kt)("inlineCode",{parentName:"p"},"Lens")," is a mapped type that exposes ",(0,o.kt)("inlineCode",{parentName:"p"},"Author"),"'s relations as simple keys."),(0,o.kt)("p",null,"Those keys themselves return new ",(0,o.kt)("inlineCode",{parentName:"p"},"Lens"),"s, i.e. ",(0,o.kt)("inlineCode",{parentName:"p"},"a.books")," returns ",(0,o.kt)("inlineCode",{parentName:"p"},"Lens<Book, Book[]>")," (the 2nd ",(0,o.kt)("inlineCode",{parentName:"p"},"Book[]")," is because ",(0,o.kt)("inlineCode",{parentName:"p"},"books")," returns multiple ",(0,o.kt)("inlineCode",{parentName:"p"},"Book"),"s)."),(0,o.kt)("p",null,"Then ",(0,o.kt)("inlineCode",{parentName:"p"},".reviews")," returns ",(0,o.kt)("inlineCode",{parentName:"p"},"Lens<BookReview, BookReview[]>"),', and since it is the "last path" / last lens, that is who the ',(0,o.kt)("inlineCode",{parentName:"p"},"author.load")," method knows that its return type should be ",(0,o.kt)("inlineCode",{parentName:"p"},"BookReview[]"),"."))}c.isMDXComponent=!0}}]);